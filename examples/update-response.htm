<!doctype html>
<html ng-app="Demo">
<head>
	<meta charset="utf-8" />
	<title>Using DeferredWithMultipleUpdates.js And AngularJS</title>
</head>
<body ng-controller="FriendsController">

	<h1>
		Using DeferredWithMultipleUpdates.js And AngularJS
	</h1>

	<h2>
		Here are my friends: (AJAX Response)
	</h2>

	<ul>
		<li ng-repeat="friend in friends">
			{{ friend.name }}
		</li>
	</ul>


	<!-- Load AngularJS from the Google CDN. -->
	<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.min.js"></script>

	<!-- Load our deferred module. -->
	<script type="text/javascript" src="../lib/deferred-with-multiple-updates.js"></script>

	<!-- Configure our demo module. -->
	<script type="text/javascript">


		// Define our demo module and indicate that the deferred module needs to
		// be loaded before this demo can run.
		var app = angular.module( "Demo", [ "DeferredWithMultipleUpdates" ] );


		// Define our friend controller. This will consume the new deferred.
		app.controller(
			"FriendsController",
			function( $scope, friendService ) {
				$scope.friends = friendService.get();
				$scope.friends.then(
					function( friends ) {
						// Overwrite the friends collection with the "true" data from the server.
						$scope.friends = friends;
					}
				);
			}
		);


		// Define our friend service - this is where we are going to use caching and our
		// updatable deferred.
		app.service(
			"friendService",
			function( $timeout, DeferredWithMultipleUpdates ) {


				// Define the cached data.
				var cachedData = [
					{
						id: 3,
						name: "Joanna"
					}
				];

				// Define the "True" data that would be coming from the server.
				var serverData = [
					{
						id: 1,
						name: "Sarah"
					},
					{
						id: 2,
						name: "Tricia"
					},
					{
						id: 3,
						name: "Joanna"
					},
					{
						id: 4,
						name: "Kit"
					}
				];


				// Define our get() method. Since we don't really have a server in this demo,
				// we're going to use $timeout to simulate network latency. We'll immediately
				// resolve the deferred with the cache data; then, we'll "update" the deferred
				// with the server-side data.
				this.get = function() {

					// Create our decorated deferred object.
					var deferred = DeferredWithMultipleUpdates.defer();

					// Get the data from the server (simulation).
					$timeout(
						function() {

							deferred.resolve( serverData );

						},
						2000
					);

					// Before the server comes back, resolve the deferred object with the locally
					// cached data.
					deferred.resolve( cachedData );

					// Return the promise.
					return( deferred.promise );

				};


			}
		);


	</script>

</body>
</html>
